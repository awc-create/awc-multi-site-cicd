name: Build and Test

on:
  repository_dispatch:

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  detect-project-type:
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ github.event.client_payload.repository }}
      repository_name: ${{ github.event.client_payload.repository_name }}
      branch: ${{ github.event.client_payload.branch }}
      project_type: ${{ steps.detect.outputs.PROJECT_TYPE }}

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.event.client_payload.branch }}
          path: site-repo  # ‚úÖ Clones into site-repo

      - name: Debug - Verify Repository and Files
        run: |
          echo "‚úÖ Cloned repository successfully into site-repo"
          echo "Current Directory:"
          pwd
          ls -la
        working-directory: site-repo

      - name: Verify package.json and Print Full Path
        run: |
          if [ ! -f "$(pwd)/package.json" ]; then
            echo "‚ùå package.json NOT found at: $(pwd)/package.json"
            exit 1
          else
            echo "‚úÖ package.json found at: $(pwd)/package.json"
          fi
        working-directory: site-repo

      - name: Read `.cicd-config.yml` (if exists)
        id: detect
        run: |
          PROJECT_TYPE="static"
          if [ -f "$REPO_DIR/.cicd-config.yml" ]; then
            PROJECT_TYPE=$(grep "project_type:" $REPO_DIR/.cicd-config.yml | awk '{print $2}')
          fi
          if ls $REPO_DIR/*.tf &>/dev/null; then
            PROJECT_TYPE="terraform"
          fi
          echo "::set-output name=PROJECT_TYPE::$PROJECT_TYPE"

  static_pipeline:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.project_type == 'static'
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ needs.detect-project-type.outputs.repository }}
      repository_name: ${{ needs.detect-project-type.outputs.repository_name }}
      branch: ${{ needs.detect-project-type.outputs.branch }}

    steps:
      - name: Define Repository Path
        run: |
          export REPO_DIR="/home/runner/work/${{ needs.detect-project-type.outputs.repository_name }}/${{ needs.detect-project-type.outputs.repository_name }}"
          echo "REPO_DIR=$REPO_DIR" >> $GITHUB_ENV
          echo "üìÅ Repository will be cloned into: $REPO_DIR"

      - name: Checkout Target Repository into Correct Path
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect-project-type.outputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.detect-project-type.outputs.branch }}
          path: ${{ needs.detect-project-type.outputs.repository_name }}  # ‚úÖ Forces correct directory

      - name: Verify package.json
        run: |
          if [ ! -f "$REPO_DIR/package.json" ]; then
            echo "‚ùå package.json not found!" && exit 1
          else
            echo "‚úÖ package.json found."
          fi

      - name: Install Dependencies
        run: |
          cd $REPO_DIR  # ‚úÖ Enter correct directory
          npm install

      - name: Verify Working Directory and Test Files
        run: |
          cd $REPO_DIR  # ‚úÖ Enter correct directory
          pwd
          ls -la
          find . -type f -name "*.test.tsx" -o -name "*.spec.tsx"

      - name: Build the Project
        run: |
          cd $REPO_DIR  # ‚úÖ Enter correct directory
          npm run build

      - name: Run Unit Tests
        run: |
          cd $REPO_DIR  # ‚úÖ Enter correct directory
          npm test || echo "‚ö†Ô∏è No tests found, skipping..."
