name: Build, Test, and Deploy to Vercel

on:
  push:
    branches:
      - main
      - 'feat/**'
      - 'fix/**'
    paths-ignore:
      - '**'
  repository_dispatch:

permissions:
  contents: read
  actions: write
  issues: write

env:
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets[format('{0}_VERCEL_ORG_ID', github.repository)] }}
  VERCEL_PROJECT_ID: ${{ secrets[format('{0}_VERCEL_PROJECT_ID', github.repository)] }}

jobs:
  detect-project-type:
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ github.event.client_payload.repository }}
      repository_name: ${{ github.event.client_payload.repository_name }}
      branch: ${{ github.event.client_payload.branch }}
      project_type: ${{ steps.detect.outputs.PROJECT_TYPE }}

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.event.client_payload.branch }}
          path: ${{ github.event.client_payload.repository_name }}

      - name: Debug - Verify Repository and Files
        run: |
          echo "Current Directory: $(pwd)"
          ls -la
        working-directory: ${{ github.event.client_payload.repository_name }}

      - name: Verify package.json and Print Full Path
        run: |
          ls -la
          if [ ! -f "$(pwd)/package.json" ]; then
            echo "package.json NOT found at: $(pwd)/package.json"
            exit 1
          else
            echo "package.json found at: $(pwd)/package.json"
          fi
        working-directory: ${{ github.event.client_payload.repository_name }}

      - name: Read `.cicd-config.yml` (if exists)
        id: detect
        run: |
          ls -la
          PROJECT_TYPE="static"
          if [ -f ".cicd-config.yml" ]; then
            PROJECT_TYPE=$(grep "project_type:" .cicd-config.yml | awk '{print $2}')
          fi
          if ls *.tf &>/dev/null; then
            PROJECT_TYPE="terraform"
          fi
          echo "::set-output name=PROJECT_TYPE::$PROJECT_TYPE"
        working-directory: ${{ github.event.client_payload.repository_name }}

  static_pipeline:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.project_type == 'static'
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ needs.detect-project-type.outputs.repository }}
      repository_name: ${{ needs.detect-project-type.outputs.repository_name }}
      branch: ${{ needs.detect-project-type.outputs.branch }}

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect-project-type.outputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.detect-project-type.outputs.branch }}
          path: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Verify package.json
        run: |
          ls -la
          if [ ! -f "package.json" ]; then
            echo "package.json not found"
            exit 1
          fi
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Install Dependencies
        run: |
          ls -la
          npm install
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Verify Working Directory and Test Files
        run: |
          ls -la
          find . -type f -name "*.test.tsx" -o -name "*.spec.tsx"
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Build the Project
        run: |
          ls -la
          npm run build
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Run Unit Tests
        run: |
          ls -la
          npm test || echo "No tests found, skipping..."
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

  preview-to-vercel:
    needs: static_pipeline
    if: startsWith(needs.static_pipeline.outputs.branch, 'feat/') || startsWith(needs.static_pipeline.outputs.branch, 'fix/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.static_pipeline.outputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.static_pipeline.outputs.branch }}
          path: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Install Vercel CLI
        run: npm install -g vercel
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Pull Vercel Preview Environment
        run: |
          vercel pull --yes \
            --environment=preview \
            --token=${{ env.VERCEL_TOKEN }} \
            --scope=${{ env.VERCEL_ORG_ID }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ env.VERCEL_TOKEN }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Deploy Preview Artifacts
        run: vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

  production-to-vercel:
    needs: static_pipeline
    if: needs.static_pipeline.outputs.branch == 'main'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.static_pipeline.outputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          path: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Install Vercel CLI
        run: npm install -g vercel
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Pull Vercel Production Environment
        run: |
          vercel pull --yes \
            --environment=production \
            --token=${{ env.VERCEL_TOKEN }} \
            --scope=${{ env.VERCEL_ORG_ID }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Build Project for Production
        run: vercel build --prod --token=${{ env.VERCEL_TOKEN }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Deploy Production Artifacts
        run: vercel deploy --prebuilt --prod --token=${{ env.VERCEL_TOKEN }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}
