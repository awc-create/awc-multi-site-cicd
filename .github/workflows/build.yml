name: Build, Test, and Deploy to Vercel

on:
  push:
    branches:
      - dev
      - main
      - 'feat/**'
      - 'fix/**'
    # NOTE: paths-ignore '**' prevents all push triggers.
    # Remove or narrow this if you want pushes to run.
    # paths-ignore:
    #   - '**'
  repository_dispatch:

env:
  AWS_REGION: eu-west-2
  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
  VERCEL_ORG_ID: ${{ secrets[format('{0}_VERCEL_ORG_ID', github.repository)] }}
  VERCEL_PROJECT_ID: ${{ secrets[format('{0}_VERCEL_PROJECT_ID', github.repository)] }}
  CLOUDFRONT_DISTRIBUTION_ID: ${{ secrets[format('{0}_CLOUDFRONT_DISTRIBUTION_ID', github.repository)] }}
  S3_BUCKET_NAME: ${{ secrets[format('{0}_S3_BUCKET_NAME', github.repository)] }}

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  detect-project-type:
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ github.event.client_payload.repository }}
      repository_name: ${{ github.event.client_payload.repository_name }}
      branch: ${{ github.event.client_payload.branch }}
      project_type: ${{ steps.detect.outputs.PROJECT_TYPE }}

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.event.client_payload.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: ${{ github.event.client_payload.branch }}
          path: ${{ github.event.client_payload.repository_name }}

      - name: Debug - Verify Repository and Files
        run: |
          echo "Current Directory: $(pwd)"
          ls -la
        working-directory: ${{ github.event.client_payload.repository_name }}

      - name: Checkout Infra Repo to temp-infra/
        uses: actions/checkout@v4
        with:
          repository: awc-create/awc-multi-site-cicd
          token: ${{ secrets.GITHUB_TOKEN }}
          path: temp-infra

      - name: Copy Terraform into Site Repo
        run: |
          mkdir -p ${{ github.event.client_payload.repository_name }}/terraform
          cp -r temp-infra/infra/* ${{ github.event.client_payload.repository_name }}/terraform/

      - name: Print Terraform Files
        run: |
          echo "==== PROJECT ROOT ===="
          ls -la ${{ github.event.client_payload.repository_name }}
          echo "==== TERRAFORM FILES ===="
          ls -la ${{ github.event.client_payload.repository_name }}/terraform
          echo "==== All .tf Files ===="
          find ${{ github.event.client_payload.repository_name }}/terraform -name "*.tf"

      - name: Debug - Verify Final Structure
        run: |
          echo "== PROJECT DIR =="
          ls -la ${{ github.event.client_payload.repository_name }}
          echo "== TERRAFORM DIR =="
          ls -la ${{ github.event.client_payload.repository_name }}/terraform

      - name: Verify package.json and Print Full Path
        run: |
          ls -la
          if [ ! -f "$(pwd)/package.json" ]; then
            echo "package.json NOT found at: $(pwd)/package.json"
            exit 1
          else
            echo "package.json found at: $(pwd)/package.json"
          fi
        working-directory: ${{ github.event.client_payload.repository_name }}

      - name: Read `.cicd-config.yml` (if exists)
        id: detect
        run: |
          ls -la
          PROJECT_TYPE="static"
          if [ -f ".cicd-config.yml" ]; then
            PROJECT_TYPE=$(grep "project_type:" .cicd-config.yml | awk '{print $2}')
          fi
          if ls *.tf &>/dev/null; then
            PROJECT_TYPE="terraform"
          fi
          echo "PROJECT_TYPE=$PROJECT_TYPE" >> "$GITHUB_OUTPUT"
        working-directory: ${{ github.event.client_payload.repository_name }}

  static_pipeline:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.project_type == 'static'
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ needs.detect-project-type.outputs.repository }}
      repository_name: ${{ needs.detect-project-type.outputs.repository_name }}
      branch: ${{ needs.detect-project-type.outputs.branch }}
      has_out: ${{ steps.check_out.outputs.has_out }}

    steps:
      - name: üîç Print Secret-Resolved ENV Variables
        run: |
          echo "‚úÖ VERCEL_ORG_ID = $VERCEL_ORG_ID"
          echo "‚úÖ VERCEL_PROJECT_ID = $VERCEL_PROJECT_ID"
          echo "‚úÖ CLOUDFRONT_DISTRIBUTION_ID = $CLOUDFRONT_DISTRIBUTION_ID"
          echo "‚úÖ S3_BUCKET_NAME = $S3_BUCKET_NAME"

      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.detect-project-type.outputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.detect-project-type.outputs.branch }}
          path: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Verify package.json
        run: |
          ls -la
          if [ ! -f "package.json" ]; then
            echo "package.json not found"
            exit 1
          fi
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Use Node.js 22 (match local env)
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Install Dependencies
        run: |
          ls -la
          yarn install --immutable
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Verify Working Directory and Test Files
        run: |
          ls -la
          find . -type f -name "*.test.tsx" -o -name "*.spec.tsx"
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Build the Project
        run: |
          ls -la
          yarn build
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      # Soft check for out/ and expose as output "has_out"
      - name: Check if out/ exists
        id: check_out
        run: |
          OUT_DIR="${{ needs.detect-project-type.outputs.repository_name }}/out"
          if [ -d "$OUT_DIR" ]; then
            echo "has_out=true" >> "$GITHUB_OUTPUT"
            echo "‚úÖ out/ found at $OUT_DIR"
          else
            echo "has_out=false" >> "$GITHUB_OUTPUT"
            echo "‚ö†Ô∏è out/ not found ‚Äî skipping artifact upload"
          fi

      # Keep the informational check (never fails)
      - name: Verify out/ folder was created
        run: |
          echo "üìÇ Checking if '${{ needs.static_pipeline.outputs.repository_name }}/out/' folder exists..."
          if [ ! -d "${{ needs.static_pipeline.outputs.repository_name }}/out" ]; then
            echo "‚ö†Ô∏è 'out/' folder not found ‚Äî skipping check for now"
          else
            echo "‚úÖ '${{ needs.static_pipeline.outputs.repository_name }}/out/' folder exists."
          fi

      - name: Run Unit Tests
        run: |
          ls -la
          yarn test || echo "No tests found, skipping..."
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Upload Static Export (out/)
        if: steps.check_out.outputs.has_out == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: static-export
          path: ${{ needs.detect-project-type.outputs.repository_name }}/out

  preview-to-vercel:
    needs: static_pipeline
    if: startsWith(needs.static_pipeline.outputs.branch, 'feat/') || startsWith(needs.static_pipeline.outputs.branch, 'fix/')
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.static_pipeline.outputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.static_pipeline.outputs.branch }}
          path: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Install Vercel CLI
        run: yarn global add vercel
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Pull Vercel Preview Environment
        run: |
          vercel pull --yes \
            --environment=preview \
            --token=${{ env.VERCEL_TOKEN }} \
            --scope=${{ env.VERCEL_ORG_ID }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ env.VERCEL_TOKEN }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Deploy Preview Artifacts
        run: vercel deploy --prebuilt --token=${{ env.VERCEL_TOKEN }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

  production-to-vercel:
    needs: static_pipeline
    if: needs.static_pipeline.outputs.branch == 'dev'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.static_pipeline.outputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: dev
          path: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Install Vercel CLI
        run: yarn global add vercel
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Pull Vercel Production Environment
        run: |
          vercel pull --yes \
            --environment=production \
            --token=${{ env.VERCEL_TOKEN }} \
            --scope=${{ env.VERCEL_ORG_ID }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Build Project for Production
        run: vercel build --prod --token=${{ env.VERCEL_TOKEN }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Deploy Production Artifacts
        run: vercel deploy --prebuilt --prod --token=${{ env.VERCEL_TOKEN }}
        working-directory: ${{ needs.static_pipeline.outputs.repository_name }}

  deploy-to-s3:
    needs: static_pipeline
    if: needs.static_pipeline.outputs.branch == 'main' && needs.static_pipeline.outputs.has_out == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Set Repo Key Env
        id: set
        run: |
          echo "REPO_KEY=${{ needs.static_pipeline.outputs.repository_name }}" >> $GITHUB_ENV
          echo "REPO_KEY_UPPER=$(echo '${{ needs.static_pipeline.outputs.repository_name }}' | tr '[:lower:]-' '[:upper:]_')" >> $GITHUB_ENV

      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.static_pipeline.outputs.repository }}
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: main
          path: ${{ needs.static_pipeline.outputs.repository_name }}

      - name: Download Static Export Artifact
        uses: actions/download-artifact@v4
        with:
          name: static-export
          path: out

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Set dynamic secrets as environment vars
        env:
          REPO_KEY: ${{ env.REPO_KEY_UPPER }}
          S3_BUCKET: ${{ secrets[format('{0}_S3_BUCKET_NAME', env.REPO_KEY_UPPER)] }}
          CLOUDFRONT_ID: ${{ secrets[format('{0}_CLOUDFRONT_DISTRIBUTION_ID', env.REPO_KEY_UPPER)] }}
        run: |
          echo "‚úÖ S3_BUCKET_NAME: $S3_BUCKET"
          echo "‚úÖ CLOUDFRONT_DISTRIBUTION_ID: $CLOUDFRONT_ID"
          echo "S3_BUCKET=$S3_BUCKET" >> $GITHUB_ENV
          echo "CLOUDFRONT_ID=$CLOUDFRONT_ID" >> $GITHUB_ENV

      - name: Sync Static Files to S3
        run: |
          echo "üì¶ Syncing static site to S3 bucket: $S3_BUCKET"
          aws s3 sync out/ s3://$S3_BUCKET --delete

      - name: Invalidate CloudFront Cache
        if: env.CLOUDFRONT_ID != ''
        run: |
          echo "üöÄ Invalidating CloudFront cache for: $CLOUDFRONT_ID"
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*"
