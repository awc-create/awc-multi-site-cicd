name: Deploy to AWS (Terraform)

on:
  push:
    branches:
      - main

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  detect-project-type:
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ github.repository }}
      repository_name: ${{ github.event.repository.name }}
      branch: ${{ github.ref_name }}
      project_type: ${{ steps.detect.outputs.PROJECT_TYPE }}

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ${{ github.event.repository.name }}

      - name: Debug - Verify Repository and Files
        run: |
          echo "Current Directory: $(pwd)"
          ls -la
        working-directory: ${{ github.event.repository.name }}

      - name: Verify package.json and Print Full Path
        run: |
          ls -la
          if [ ! -f "$(pwd)/package.json" ]; then
            echo "package.json NOT found at: $(pwd)/package.json"
            exit 1
          else
            echo "package.json found at: $(pwd)/package.json"
          fi
        working-directory: ${{ github.event.repository.name }}

      - name: Read `.cicd-config.yml` (if exists)
        id: detect
        run: |
          PROJECT_TYPE="static"
          if [ -f ".cicd-config.yml" ]; then
            PROJECT_TYPE=$(grep "project_type:" .cicd-config.yml | awk '{print $2}')
          fi
          if ls *.tf &>/dev/null; then
            PROJECT_TYPE="terraform"
          fi
          echo "::set-output name=PROJECT_TYPE::$PROJECT_TYPE"
        working-directory: ${{ github.event.repository.name }}

  static_pipeline:
    needs: detect-project-type
    if: needs.detect-project-type.outputs.project_type == 'static'
    runs-on: ubuntu-latest
    outputs:
      repository: ${{ needs.detect-project-type.outputs.repository }}
      repository_name: ${{ needs.detect-project-type.outputs.repository_name }}
      branch: ${{ needs.detect-project-type.outputs.branch }}

    steps:
      - name: Checkout Target Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ needs.detect-project-type.outputs.branch }}
          path: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Verify package.json
        run: |
          ls -la
          if [ ! -f "package.json" ]; then
            echo "package.json not found"
            exit 1
          fi
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Install Dependencies
        run: yarn install --immutable
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Verify Working Directory and Test Files
        run: |
          find . -type f -name "*.test.tsx" -o -name "*.spec.tsx"
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Build the Project
        run: yarn build
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

      - name: Run Unit Tests
        run: |
          yarn test || echo "No tests found, skipping..."
        working-directory: ${{ needs.detect-project-type.outputs.repository_name }}

  terraform_pipeline:
    needs: static_pipeline
    if: needs.static_pipeline.outputs.branch == 'main'
    runs-on: ubuntu-latest

    env:
      AWS_REGION: eu-west-2
      PROJECT_NAME: ${{ needs.static_pipeline.outputs.repository_name }}

    steps:
      - name: Copy Static Build Output
        run: |
          mkdir -p static
          cp -r ${{ needs.static_pipeline.outputs.repository_name }}/out/* static/

      - name: Checkout Infra Repository
        uses: actions/checkout@v4
        with:
          repository: YOUR_ORG_OR_USERNAME/awc-multi-site-cicd
          token: ${{ secrets.GITHUB_TOKEN }}
          path: infra

      - name: Place Static Site Inside Infra
        run: |
          mkdir -p infra/infra/site
          cp -r static/* infra/infra/site/

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: terraform init
        working-directory: infra/infra

      - name: Terraform Plan
        run: terraform plan -var="project_name=${{ env.PROJECT_NAME }}" -out=tfplan
        working-directory: infra/infra

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: infra/infra
